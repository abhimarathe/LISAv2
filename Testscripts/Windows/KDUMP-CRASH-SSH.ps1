# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License.

param([String] $TestParams,
      [object] $AllVmData)

function Main {
    try {
        $noReceiver = $true
        $noSender = $true
        foreach ($vmData in $AllVmData){
            if ($vmData.Rolename.Contains("role-0") -or $vmData.RoleName.Contains("sender")){
                $senderVMData = $vmData
                $noSender = $false
            } elseif ($vmData.Rolename.Contains("role-1") -or $vmData.RoleName.Contains("receiver")) {
                $receiverVMData = $vmData
                $noReceiver = $false
            }
        }
        if ($noReceiver) {
            Throw "No Receiver VM defined. Aborting Test."
        }
        if ($noSender) {
            Throw "No Sender VM defined. Aborting Test."
        }

        #CONFIGURE VM Details
        Write-LogInfo "RECEIVER VM details :"
        Write-LogInfo "  RoleName : $($receiverVMData.RoleName)"
        Write-LogInfo "  Public IP : $($receiverVMData.PublicIP)"
        Write-LogInfo "  SSH Port : $($receiverVMData.SSHPort)"
        Write-LogInfo "  Internal IP : $($receiverVMData.InternalIP)"
        Write-LogInfo "SENDER VM details :"
        Write-LogInfo "  RoleName : $($senderVMData.RoleName)"
        Write-LogInfo "  Public IP : $($senderVMData.PublicIP)"
        Write-LogInfo "  SSH Port : $($senderVMData.SSHPort)"
        Write-LogInfo "  Internal IP : $($senderVMData.InternalIP)"

        Provision-VMsForLisa -allVMData $AllVmData -installPackagesOnRoleNames "none"

        Write-LogInfo "Generating constants.sh ..."
        $constantsFile = "$LogDir\constants.sh"
        Set-Content -Value "# Generated by Azure Automation." -Path $constantsFile
        Add-Content -Value "sshIP=$($senderVMData.InternalIP)" -Path $constantsFile
        foreach ($param in $currentTestData.TestParameters.param) {
            Add-Content -Value "$param" -Path $constantsFile
        }
        Copy-RemoteFiles -uploadTo $receiverVMData.PublicIP -port $receiverVMData.SSHPort `
            -files "$constantsFile" -username $user -password $password -upload -runAsSudo

        Run-LinuxCmd -ip $receiverVMData.PublicIP -port $receiverVMData.SSHPort `
                -username $user -password $password -command "export HOME=``pwd``; bash ./KDUMP-Config.sh" -runAsSudo
        $state = Run-LinuxCmd -ip $receiverVMData.PublicIP -port $receiverVMData.SSHPort `
                -username $user -password $password -command "cat state.txt" -runAsSudo
        if (($state -eq "TestAborted") -or ($state -eq "TestFailed")) {
            Write-LogErr "Running KDUMP-Config.sh script failed on VM!"
            return "ABORTED"
        } elseif ($state -eq "TestSkipped") {
            Write-LogWarn "Distro is not supported or kernel config does not allow auto"
            return "SKIPPED"
        }
        # restart receiver VM
        Run-LinuxCmd -ip $receiverVMData.PublicIP -port $receiverVMData.SSHPort `
                -username $user -password $password -command "sync; reboot" -runAsSudo `
                -RunInBackGround | Out-Null
        Write-LogInfo "Rebooting VM $($receiverVMData.RoleName) after kdump configuration..."
        Start-Sleep -Seconds 10 # Wait for kvp & ssh services stop

        # Wait for VM boot up and update ip address
        Wait-ForVMToStartSSH -Ipv4addr $receiverVMData.PublicIP -PortNumber $receiverVMData.SSHPort -StepTimeout 360 | Out-Null
        # prepare kdump
        Run-LinuxCmd -ip $receiverVMData.PublicIP -port $receiverVMData.SSHPort `
                -username $user -password $password `
                -command "export HOME=``pwd``;chmod u+x KDUMP-Execute.sh && ./KDUMP-Execute.sh" -runAsSudo
        Write-LogInfo "Executed KDUMP-Execute.sh in the VM"
        $state = Run-LinuxCmd -ip $receiverVMData.PublicIP -port $receiverVMData.SSHPort `
                -username $user -password $password -command "cat state.txt" -runAsSudo
        if (($state -eq "TestAborted") -or ($state -eq "TestFailed")) {
            Write-LogErr "Running KDUMP-Execute.sh script failed on VM!"
            return "ABORTED"
        } elseif ($state -eq "TestSkipped") {
            Write-LogWarn "Distro is not supported or kernel Execute does not allow auto"
            return "SKIPPED"
        }

        # generate sysrq
        Write-LogInfo "Set /proc/sysrq-trigger"
        Run-LinuxCmd -ip $receiverVMData.PublicIP -port $receiverVMData.SSHPort `
                -username $user -password $password -command "sync; echo c > /proc/sysrq-trigger" `
                -RunInBackGround -runAsSudo | Out-Null

        # Give the host a few seconds to record the event
        Write-LogInfo "Waiting 60 seconds to record the event..."
        Start-Sleep -Seconds 60
        # Wait for VM boot up and update ip address
        Wait-ForVMToStartSSH -Ipv4addr $receiverVMData.PublicIP -PortNumber $receiverVMData.SSHPort -StepTimeout 360 | Out-Null

        # Verify
        $returnVal = Run-LinuxCmd -ip $senderVMData.PublicIP -port $senderVMData.SSHPort `
                -username $user -password $password -command "find /var/crash/* -type f > /dev/null; echo $?"

        if ($returnVal) {
            Write-LogInfo "KDUMP was successfully copied over ssh"
            $testResult = "PASS"
        } else {
            Write-LogErr "KDUMP failed Either no dump file at /var/crash on $($senderVMData.RoleName) or kernel panic for $($receiverVMData.RoleName)"
            $testResult = "FAIL"
        }
    } catch {
        $ErrorMessage = $_.Exception.Message
        $ErrorLine = $_.InvocationInfo.ScriptLineNumber
        Write-LogErr "EXCEPTION : $ErrorMessage at line: $ErrorLine"
    } finally {
        if (!$testResult) {
            $testResult = "ABORTED"
        }
        $resultArr += $testResult
    }
    Write-LogInfo "Test result: $testResult"
    return $testResult

}

Main
